==== MATHEMATICAL EXPRESSION PARSER ====

Takes an expression like "1 - (0.5 * 1.1)^2" and evaluates it.
Supported infix operators: + - * / ^
Expressions can be abstracted using user-defined functions and variables.

Expressions can either be passed by command-line arguments or entering the
parser in interactive mode.

==== USAGE ====
To enter the read-eval-print loop (interactive mode), run the program without
any command line arguments. To run a program from a file, pass the filepath
as argv[1].

An expression consists of any number of symbols, numbers or brackets terminated
by a semicolon (;).

==== BUILT-IN FUNCTIONS ====

>> show <any word>;
  Prints the given word to stdout.

>> env;
  Prints the current environment.

>> defvar {<sym, name>} <any expression>;
  Assigns the given expression to the symbol described by 'name'.

>> deffun {<sym, name>} {<sym, arg1>, <sym, arg2>, ...} {body};
  Assigns a function with the given body and formal arguments to the symbol
  described by 'name'.

>> undef {<sym, name>};
  Removes the definition of 'name' from the current environment.

>> if {<expr, predicate>} {<expr, consequent>} {<expr, alternative>};
  Evaluates the predicate. If it is positive, evaluates the consequent and
  returns the result. It the predicate evaluated to a negative value, evaluates
  the alternative and returns the result.

==== BUILDING ====

Dependencies: gcc, GNU make, GNU readline.
Run make in the root directory to compile.

==== EXAMPLE SESSION ====

REPL>> env;
  variable pi: <number, 3.141593>
  variable e: <number, 2.718282>
REPL>> pi;
  <number, 3.141593>
REPL>> 2*pi;
  <number, 6.283185>
REPL>> deffun {sum_of_squares} {x y} {x^2 + y^2};
REPL>> env;
  variable pi: <number, 3.141593>
  variable e: <number, 2.718282>
  function sum_of_squares of 2 arguments
REPL>> sum_of_squares 3 4;
  <number, 25.000000>
REPL>> q

For example programs see the "examples" subdirectory.

