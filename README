==== MATHEMATICAL EXPRESSION PARSING LANGUAGE ====

Takes an expression like "1 - (0.5 * 1.1)^2;" and evaluates it.
Supported infix operators: + - * / ^
Expressions can be abstracted using user-defined functions and variables.

Definitions:
> An expression consists of any number of words terminated by a semicolon (;).
> A word is a number/symbol/operator/symbol/subexpression (equivalent to
  "token"). 

==== BUILDING ====

Dependencies: gcc, GNU make, GNU readline.
Run make in the root directory to compile.

==== USAGE ====
To enter the read-eval-print loop (interactive mode), run the program without
any command line arguments. To run a program from a file, pass the filepath
as argv[1].

==== BUILT-IN FUNCTIONS ====

>> show <any word>;
  Prints the given word to stdout.

>> env;
  Prints the current environment.

>> defvar {<sym, name>} <any expression>;
  Assigns the given expression to the symbol described by 'name'.

>> deffun {<sym, name>} {<sym, arg1>, <sym, arg2>, ...} {body};
  Assigns a function with the given body and formal arguments to the symbol
  described by 'name'.

>> undef {<sym, name>};
  Removes the definition of 'name' from the current environment.

>> if {<expr, predicate>} {<expr, consequent>} {<expr, alternative>};
  Evaluates the predicate. If it is positive, evaluates the consequent and
  returns the result. It the predicate evaluated to a negative value, evaluates
  the alternative and returns the result.

==== EXAMPLE SESSION ====

REPL>> env;
  variable pi: <number, 3.141593>
  variable e: <number, 2.718282>
REPL>> pi;
  <number, 3.141593>
REPL>> 2*pi;
  <number, 6.283185>
REPL>> deffun {sum_of_squares} {x y} {x^2 + y^2};
REPL>> env;
  variable pi: <number, 3.141593>
  variable e: <number, 2.718282>
  function sum_of_squares of 2 arguments
REPL>> sum_of_squares 3 4;
  <number, 25.000000>
REPL>> q

For example programs see the "examples" subdirectory.

==== DETAILS ====

Black-box diagram of the interpreter:

INPUT ----> LEXER -->--- EVAL -->-- OUTPUT
                    |           |
                    |           |
                    -<- APPLY -<-

Stages of evaluation:

1. The input string (input in REPL/program file) is first passed through the
LEXER and broken up into words in the original order and stored in a wordstack
(ordinary stack data structure).
2. The wordstack is separated into separate expressions (semicolon-terminated).
3. Before evaluation the wordstack is converted to postfix notation. For
example: "1 + 1" becomes "1 1 +", "f(x, y, k*z)" becomes "x y k z * f" and so
on.
4. EVAL then reverses the postfix stack so that the first word in comes
out first (a queue would be more efficient). For example: "pi 2 / sin" becomes
"sin / 2 pi" (the stack grows to the right, so pi will come out first now).
5. EVAL then reads from the reversed postfix stack into an evalstack until
it finds an operator or a symbol bound to a function. The evalstack is then
passed to APPLY. If no operators/functions are found, then the evalstack is
sent to OUTPUT.
6. APPLY pops the function name off the evalstack and sends the remaining
argstack to step 2 to evaluate its arguments. Once the argstack is evaluated,
the arguments are popped off and substituted into the body of the function.
The body with substituted arguments is then sent to step 2.

This cycle continues until EVAL produces an evalstack without any operators
or functions (possibly never in the case of infinite recursion).

